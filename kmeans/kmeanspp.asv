function [ U, kpoints ] = kmeanspp( data, k, dist )

  [n, m] = size(data);
  K_ini = zeros(k,1);
  Distancias = zeros(n);
  
  %Cria matrix de distancias
  for i=1:n   %para cada instancia
    point = data(i,:);
    Distancias(:,i) = distance(point, data, n, dist); %calcula distancias do ponto i para todos os dados
  end
  Distancias(Distancias == 0) = inf;
  
  
  
  %Seleciona primeiro centroide inicial
  K_ini(1) = randi(n,1);
  kpoints(1,:) = data(K_ini(1),:);
  
  %Seleciona outros centroides iniciais
  for i=2:k
    Distancias = Inf(i-1,n);
    for p=1:n
      Distancias(:,n) = distance(data(p,:), kpoints(1:i-1,:), n, dist);
    end
    D = min(Distancias); %Define distancia dos centroides mais próximos
    D(K_ini>0)=0; %elimina centroides já selecionados
    prob = (D.^2)./sum(D.^2);
    
    K_ini(i) = sum(rand >= cumsum([0, prob]));
    kpoints(i,:) = data(K_ini(i),:);
  end
  
  
  
  
  %K-MEANS NORMAL
  
  
  % DEFINIÇÃO DE VARIÁVEIS
  maxIt = 100; % maximo de iterações
  it = 0; %contador de iterações
  U = zeros(k, n); %cria matriz de partição
  old_kpoints = kpoints+5; %protótipos anteriores para controle
  epsilon = 0; %erro máximo
  
  % LAÇO DE ITERAÇÕES DO K-MEANS
  while(abs(old_kpoints - kpoints)>epsilon & (it<maxIt))
    it = it+1;
    old_kpoints = kpoints;
    
    % ATUALIZA MATRIZ DE PARTIÇÃO
    for i=1:n   %para cada instancia
      p = data(i,:);
      D = distance(p, kpoints, k, dist); %calcula distancias dos protótipos
      [~,ind] = min(D); %Verifica qual o protótipo de menor distancia
      U(:,i)=0; %Zera todos os protótipos desse ponto
      U(ind,i)=1; %atribui 1 ao protótipo de menor distancia
    end
          
    % PLOTA GRÁFICO (Para problemas bidimensionais)        
    plotClusters2D(data,kpoints,U,k,[]);
    pause;
    
    % ATUALIZA PROTÓTIPOS
    for i=1:k  %para cada protótipo
      kpoints(i,:) = (U(i,:)*data)/length(find(U(i,:)==1)); %atualiza com a média
    end

  end
  
  
  % ÚLTIMA ATUALIZAÇÃO DA MATRIZ
  for i=1:n   %para cada instancia
    p = data(i,:);
    D = distance(p, kpoints, k, dist); %calcula distancias dos protótipos
    [~,ind] = min(D); %Verifica qual o protótipo de menor distancia
    U(:,i)=0; %Zera todos os protótipos desse ponto
    U(ind,i)=1; %atribui 1 ao protótipo de menor distancia
  end
  
  fprintf('número de iterações: %i\n\n', it)
  
  
  
  
end


% FUNÇÃO DE DISTÂNCIAS
function D = distance(p, data, n, dist)
  P = repmat(p,n,1);
  if strcmp(dist,'e') %distancia euclidiana
    D = sqrt(sum((P-data).^2, 2));
  elseif strcmp(dist,'m') %distancia manhattan
    D = sum(abs(P-data), 2);
  end
end

